# MPI implimenttation of the hfun/raster.py/msh_t() function
# Below it I have also provide the original msh_t() function without any change

def msh_t(
            self,
            window: Optional[rasterio.windows.Window] = None,
            marche: bool = False,
            verbosity : Optional[bool] = None
            ) -> jigsaw_msh_t:
        """Interpolates mesh size function on an unstructred mesh

        Interpolate the calculated mesh sizes from the raster grid
        onto an unstructured mesh. This mesh is generated by meshing
        the input raster using the size function values. The return
        value is in a projected CRS. If the input raster CRS is
        geographic, then a local UTM CRS is calculated and used
        for the output of this method.

        Parameters
        ----------
        window : rasterio.windows.Window or None, default=None
            If provided, a single window on raster for which the
            mesh size is to be returned.
        marche : bool, default=False
            Whether to run `marche` algorithm on the complete
            size function before calculating the unstructured mesh
            and interpolate values on it.
        verbosity : bool or None, default=None
            The verbosity of the output.

        Returns
        -------
        jigsaw_msh_t
            Size function calculated and interpolated on an
            unstructured mesh.

        Notes
        -----
        In case the underlying raster is created in windowed
        calculation mode, this method calculated the mesh for each
        window separately and then combines (no remeshing) the
        elements of all the windows.

        The output of this method needs to have length unit for
        distances (i.e. not degrees) since mesh size is specified
        in length units and the domain and size function are the
        passed to the mesh engine for cartesian meshing.

        The reason the full high-resolution size function is
        interpolated on a generated mesh it to save memory and
        have the ability to process and combine many DEMs. By doing
        more sizes are specified at points where the size needs to
        be smaller in the final mesh.

        To generate the mesh for size function interpolation, the
        raster size function (called ``hmat``) is passed to the mesh
        engine along with the bounding box of the size function as
        the meshing domain.
        """

        comm = MPI.COMM_WORLD
        rank = comm.Get_rank()
        size = comm.Get_size()
    
        start3 = Time.perf_counter()
    
        if rank == 0:
           print("Starting mesh calculation with MPI")

        if window is None:
            all_windows = list(self.iter_windows())
        else:
            all_windows = [window]


        local_windows = []
        for i, win in enumerate(all_windows):
            if i % size == rank:
                local_windows.append(win)
    
        local_mesh = jigsaw_msh_t()
        local_mesh.ndims = +2
        local_mesh.mshID = "euclidean-mesh"
        local_mesh.crs = self.crs

        for win in local_windows:
            hfun = jigsaw_msh_t()
            hfun.ndims = +2

            x0, y0, x1, y1 = self.get_window_bounds(win)

            utm_crs = utils.estimate_bounds_utm(
                    (x0, y0, x1, y1), self.crs)

            if utm_crs is not None:
                hfun.mshID = 'euclidean-mesh'
                # If these 3 objects (vert2, tria3, value) don't fit into
                # memroy, then the raster needs to be chunked. We need to
                # implement auto-chunking.
                start = Time.time()
                # get bbox data
                xgrid = self.get_x(window=win)
                ygrid = np.flip(self.get_y(window=win))
                xgrid, ygrid = np.meshgrid(xgrid, ygrid)
                bottom = xgrid[0, :]
                top = xgrid[1, :]
                del xgrid
                left = ygrid[:, 0]
                right = ygrid[:, 1]
                del ygrid

                _logger.info('Building hfun.tria3...')

                dim1 = win.width
                dim2 = win.height

                tria3 = np.empty(
                    ((dim1 - 1), (dim2  - 1)),
                    dtype=jigsaw_msh_t.TRIA3_t)
                index = tria3["index"]
                helper_ary = np.ones(
                        ((dim1 - 1), (dim2  - 1)),
                        dtype=jigsaw_msh_t.INDEX_t).cumsum(1) - 1
                index[:, :, 0] = np.arange(
                        0, dim1 - 1,
                        dtype=jigsaw_msh_t.INDEX_t).reshape(dim1 - 1, 1)
                index[:, :, 0] += (helper_ary + 0) * dim1

                index[:, :, 1] = np.arange(
                        1, dim1 - 0,
                        dtype=jigsaw_msh_t.INDEX_t).reshape(dim1 - 1, 1)
                index[:, :, 1] += (helper_ary + 0) * dim1

                index[:, :, 2] = np.arange(
                        1, dim1 - 0,
                        dtype=jigsaw_msh_t.INDEX_t).reshape(dim1 - 1, 1)
                index[:, :, 2] += (helper_ary + 1) * dim1

                hfun.tria3 = tria3.ravel()
                del tria3, helper_ary
                gc.collect()
                _logger.info('Done building hfun.tria3...')
                # BUILD VERT2_t. this one comes from the memcache array
                _logger.info('Building hfun.vert2...')
                hfun.vert2 = np.empty(
                    win.width*win.height,
                    dtype=jigsaw_msh_t.VERT2_t)
                hfun.vert2['coord'] = np.array(
                    self.get_xy_memcache(win, utm_crs))
                _logger.info('Done building hfun.vert2...')
                # Build REALS_t: this one comes from hfun raster
                _logger.info('Building hfun.value...')
                hfun.value = np.array(
                    self.get_values(window=win, band=1).flatten().reshape(
                        (win.width*win.height, 1)),
                    dtype=jigsaw_msh_t.REALS_t)
                _logger.info('Done building hfun.value...')

                # Build Geom
                _logger.info('Building initial geom...')
                transformer = Transformer.from_crs(
                    self.crs, utm_crs, always_xy=True)
                bbox = [
                    *[(x, left[0]) for x in bottom][:-1],
                    *[(bottom[-1], y) for y in right][:-1],
                    *[(x, right[-1]) for x in reversed(top)][:-1],
                    *[(bottom[0], y) for y in reversed(left)][:-1]
                ]
                geom = PolygonGeom(
                    ops.transform(transformer.transform, Polygon(bbox)),
                    utm_crs
                ).msh_t()
                _logger.info('Building initial geom done.')
                kwargs = {'method': 'nearest'}

            else:
                _logger.info('Forming initial hmat (euclidean-grid).')
                
                hfun.mshID = 'euclidean-grid'
                hfun.xgrid = np.array(
                    np.array(self.get_x(window=win)),
                    dtype=jigsaw_msh_t.REALS_t)
                hfun.ygrid = np.array(
                    np.flip(self.get_y(window=win)),
                    dtype=jigsaw_msh_t.REALS_t)
                hfun.value = np.array(
                    np.flipud(self.get_values(window=win, band=1)),
                    dtype=jigsaw_msh_t.REALS_t)
                kwargs = {'kx': 1, 'ky': 1}  # type: ignore[dict-item]
                geom = PolygonGeom(box(x0, y1, x1, y0), self.crs).msh_t()

            opts = jigsaw_jig_t()
            opts.mesh_dims = +2
            opts.hfun_scal = 'absolute'
            opts.optm_tria = False
            opts.hfun_hmin = np.min(hfun.value) if self.hmin is None else \
                self.hmin
            opts.hfun_hmax = np.max(hfun.value) if self.hmax is None else \
                self.hmax
            opts.verbosity = self.verbosity if verbosity is None else \
                verbosity
            # mesh of hfun window
            window_mesh = jigsaw_msh_t()
            window_mesh.mshID = 'euclidean-mesh'
            window_mesh.ndims = +2

            if marche is True:
                libsaw.marche(opts, hfun)
            
            start = Time.perf_counter()
            libsaw.jigsaw(opts, geom, window_mesh, hfun=hfun)
            end = Time.perf_counter()
            if rank == 0:
                print(f"jigsaw time: {end - start:.6f} seconds")

            del geom
            hfun.crs = utm_crs
            utils.interpolate(hfun, window_mesh, **kwargs)

            if utm_crs is not None:
                window_mesh.crs = utm_crs
                utils.reproject(window_mesh, self.crs)

            if local_mesh.tria3.size:
                local_mesh.tria3 = np.append(
                    local_mesh.tria3,
                    np.array([((idx + len(local_mesh.vert2)), tag)
                          for idx, tag in window_mesh.tria3],
                         dtype=jigsaw_msh_t.TRIA3_t),
                    axis=0)
            else:
                local_mesh.tria3 = window_mesh.tria3
                
            if local_mesh.vert2.size:
                local_mesh.vert2 = np.append(
                    local_mesh.vert2,
                    np.array(list(window_mesh.vert2),
                            dtype=jigsaw_msh_t.VERT2_t),
                    axis=0)
            else:
                local_mesh.vert2 = window_mesh.vert2
                
            if local_mesh.value.size:
                if window_mesh.value.size:
                    local_mesh.value = np.append(
                        local_mesh.value,
                        np.array(list(window_mesh.value),
                                dtype=jigsaw_msh_t.REALS_t),
                        axis=0)
            elif window_mesh.value.size:
                local_mesh.value = np.array(list(window_mesh.value), dtype=jigsaw_msh_t.REALS_t)
        
                        # ====== MPI COMMUNICATION ======
            # First gather sizes from all ranks
            all_tria3_sizes = comm.gather(len(local_mesh.tria3), root=0)
            all_vert2_sizes = comm.gather(len(local_mesh.vert2), root=0)
            all_value_sizes = comm.gather(local_mesh.value.size, root=0)  # Changed to .size

            output_mesh = jigsaw_msh_t()
            output_mesh.ndims = +2
            output_mesh.mshID = "euclidean-mesh"
            output_mesh.crs = self.crs

            if rank == 0:
                # Pre-allocate final arrays with correct shapes
                total_tria3 = sum(all_tria3_sizes)
                total_vert2 = sum(all_vert2_sizes)
                total_values = sum(all_value_sizes)
                
                output_mesh.tria3 = np.empty(total_tria3, dtype=jigsaw_msh_t.TRIA3_t)
                output_mesh.vert2 = np.empty(total_vert2, dtype=jigsaw_msh_t.VERT2_t)
                output_mesh.value = np.empty((total_values, 1), dtype=jigsaw_msh_t.REALS_t)  # Note the (N,1) shape
                
                # Insert root's data first
                vert2_count = len(local_mesh.vert2)
                output_mesh.tria3[:len(local_mesh.tria3)] = local_mesh.tria3
                output_mesh.vert2[:vert2_count] = local_mesh.vert2
                output_mesh.value[:local_mesh.value.size, 0] = local_mesh.value.ravel()  # Flatten before assignment
                
                # Receive from other ranks
                tria3_offset = len(local_mesh.tria3)
                vert2_offset = vert2_count
                value_offset = local_mesh.value.size
                
                for i in range(1, size):
                    if all_tria3_sizes[i] > 0:
                        comm.Recv(output_mesh.tria3[tria3_offset:tria3_offset+all_tria3_sizes[i]], source=i, tag=1)
                        output_mesh.tria3[tria3_offset:tria3_offset+all_tria3_sizes[i]]['index'] += vert2_offset
                        tria3_offset += all_tria3_sizes[i]
                    
                    if all_vert2_sizes[i] > 0:
                        comm.Recv(output_mesh.vert2[vert2_offset:vert2_offset+all_vert2_sizes[i]], source=i, tag=2)
                        vert2_offset += all_vert2_sizes[i]
                    
                    if all_value_sizes[i] > 0:
                        temp_buf = np.empty(all_value_sizes[i], dtype=jigsaw_msh_t.REALS_t)
                        comm.Recv(temp_buf, source=i, tag=3)
                        output_mesh.value[value_offset:value_offset+all_value_sizes[i], 0] = temp_buf
                        value_offset += all_value_sizes[i]
            else:
                # Worker ranks send their data
                if len(local_mesh.tria3) > 0:
                    comm.Send(local_mesh.tria3, dest=0, tag=1)
                if len(local_mesh.vert2) > 0:
                    comm.Send(local_mesh.vert2, dest=0, tag=2)
                if local_mesh.value.size > 0:
                    comm.Send(local_mesh.value.ravel(), dest=0, tag=3)  # Flatten before sending
            # ====== END MPI COMMUNICATION ======

            # Keep the rest EXACTLY as is
            utm_crs = utils.estimate_bounds_utm(self.get_bbox().bounds, self.crs)
            if utm_crs is not None:
                transformer = Transformer.from_crs(
                    self.crs, utm_crs, always_xy=True)
                output_mesh.vert2['coord'] = np.vstack(
                    transformer.transform(
                        output_mesh.vert2['coord'][:, 0],
                        output_mesh.vert2['coord'][:, 1]
                        )).T
                output_mesh.crs = utm_crs

            end3 = Time.perf_counter()
            print(f"Total time by the msh_t function: {end3 - start3:.6f} seconds")
            output_mesh = comm.bcast(output_mesh, root=0)
            return output_mesh






  


  #Original Implimentation of the msh_t() using multiprocessing module for the parallel process

  ef msh_t(
            self,
            window: Optional[rasterio.windows.Window] = None,
            marche: bool = False,
            verbosity : Optional[bool] = None
            ) -> jigsaw_msh_t:
        """Interpolates mesh size function on an unstructred mesh

        Interpolate the calculated mesh sizes from the raster grid
        onto an unstructured mesh. This mesh is generated by meshing
        the input raster using the size function values. The return
        value is in a projected CRS. If the input raster CRS is
        geographic, then a local UTM CRS is calculated and used
        for the output of this method.

        Parameters
        ----------
        window : rasterio.windows.Window or None, default=None
            If provided, a single window on raster for which the
            mesh size is to be returned.
        marche : bool, default=False
            Whether to run `marche` algorithm on the complete
            size function before calculating the unstructured mesh
            and interpolate values on it.
        verbosity : bool or None, default=None
            The verbosity of the output.

        Returns
        -------
        jigsaw_msh_t
            Size function calculated and interpolated on an
            unstructured mesh.

        Notes
        -----
        In case the underlying raster is created in windowed
        calculation mode, this method calculated the mesh for each
        window separately and then combines (no remeshing) the
        elements of all the windows.

        The output of this method needs to have length unit for
        distances (i.e. not degrees) since mesh size is specified
        in length units and the domain and size function are the
        passed to the mesh engine for cartesian meshing.

        The reason the full high-resolution size function is
        interpolated on a generated mesh it to save memory and
        have the ability to process and combine many DEMs. By doing
        more sizes are specified at points where the size needs to
        be smaller in the final mesh.

        To generate the mesh for size function interpolation, the
        raster size function (called ``hmat``) is passed to the mesh
        engine along with the bounding box of the size function as
        the meshing domain.
        """
        print("hii we are in the mesh")

        if window is None:
            iter_windows = list(self.iter_windows())
        else:
            iter_windows = [window]


        output_mesh = jigsaw_msh_t()
        output_mesh.ndims = +2
        output_mesh.mshID = "euclidean-mesh"
        output_mesh.crs = self.crs
        for win in iter_windows:

            hfun = jigsaw_msh_t()
            hfun.ndims = +2

            x0, y0, x1, y1 = self.get_window_bounds(win)

            utm_crs = utils.estimate_bounds_utm(
                    (x0, y0, x1, y1), self.crs)

            if utm_crs is not None:
                print("in utm crs")
                hfun.mshID = 'euclidean-mesh'
                # If these 3 objects (vert2, tria3, value) don't fit into
                # memroy, then the raster needs to be chunked. We need to
                # implement auto-chunking.
                start = time()
                # get bbox data
                xgrid = self.get_x(window=win)
                ygrid = np.flip(self.get_y(window=win))
                xgrid, ygrid = np.meshgrid(xgrid, ygrid)
                bottom = xgrid[0, :]
                top = xgrid[1, :]
                del xgrid
                left = ygrid[:, 0]
                right = ygrid[:, 1]
                del ygrid

                _logger.info('Building hfun.tria3...')

                dim1 = win.width
                dim2 = win.height

                tria3 = np.empty(
                    ((dim1 - 1), (dim2  - 1)),
                    dtype=jigsaw_msh_t.TRIA3_t)
                index = tria3["index"]
                helper_ary = np.ones(
                        ((dim1 - 1), (dim2  - 1)),
                        dtype=jigsaw_msh_t.INDEX_t).cumsum(1) - 1
                index[:, :, 0] = np.arange(
                        0, dim1 - 1,
                        dtype=jigsaw_msh_t.INDEX_t).reshape(dim1 - 1, 1)
                index[:, :, 0] += (helper_ary + 0) * dim1

                index[:, :, 1] = np.arange(
                        1, dim1 - 0,
                        dtype=jigsaw_msh_t.INDEX_t).reshape(dim1 - 1, 1)
                index[:, :, 1] += (helper_ary + 0) * dim1

                index[:, :, 2] = np.arange(
                        1, dim1 - 0,
                        dtype=jigsaw_msh_t.INDEX_t).reshape(dim1 - 1, 1)
                index[:, :, 2] += (helper_ary + 1) * dim1

                hfun.tria3 = tria3.ravel()
                del tria3, helper_ary
                gc.collect()
                _logger.info('Done building hfun.tria3...')

                # BUILD VERT2_t. this one comes from the memcache array
                _logger.info('Building hfun.vert2...')
                hfun.vert2 = np.empty(
                    win.width*win.height,
                    dtype=jigsaw_msh_t.VERT2_t)
                hfun.vert2['coord'] = np.array(
                    self.get_xy_memcache(win, utm_crs))
                _logger.info('Done building hfun.vert2...')

                # Build REALS_t: this one comes from hfun raster
                _logger.info('Building hfun.value...')
                hfun.value = np.array(
                    self.get_values(window=win, band=1).flatten().reshape(
                        (win.width*win.height, 1)),
                    dtype=jigsaw_msh_t.REALS_t)
                _logger.info('Done building hfun.value...')

                # Build Geom
                _logger.info('Building initial geom...')
                transformer = Transformer.from_crs(
                    self.crs, utm_crs, always_xy=True)
                bbox = [
                    *[(x, left[0]) for x in bottom][:-1],
                    *[(bottom[-1], y) for y in right][:-1],
                    *[(x, right[-1]) for x in reversed(top)][:-1],
                    *[(bottom[0], y) for y in reversed(left)][:-1]
                ]
                geom = PolygonGeom(
                    ops.transform(transformer.transform, Polygon(bbox)),
                    utm_crs
                ).msh_t()
                _logger.info('Building initial geom done.')
                kwargs = {'method': 'nearest'}
                print("outside utm crs")

            else:
                print("inside else")
                _logger.info('Forming initial hmat (euclidean-grid).')
                start = time()
                hfun.mshID = 'euclidean-grid'
                hfun.xgrid = np.array(
                    np.array(self.get_x(window=win)),
                    dtype=jigsaw_msh_t.REALS_t)
                hfun.ygrid = np.array(
                    np.flip(self.get_y(window=win)),
                    dtype=jigsaw_msh_t.REALS_t)
                hfun.value = np.array(
                    np.flipud(self.get_values(window=win, band=1)),
                    dtype=jigsaw_msh_t.REALS_t)
                kwargs = {'kx': 1, 'ky': 1}  # type: ignore[dict-item]
                geom = PolygonGeom(box(x0, y1, x1, y0), self.crs).msh_t()
                print("outside the else")
             print("ehat the fuck")
            _logger.info(f'Initial hfun generation took {time()-start}.')
             print("time counting",{time()-start})
             print("haha")

            _logger.info('Configuring jigsaw...')

            opts = jigsaw_jig_t()

            # additional configuration options
            opts.mesh_dims = +2
            opts.hfun_scal = 'absolute'
            # no need to optimize for size function generation
            opts.optm_tria = False

            opts.hfun_hmin = np.min(hfun.value) if self.hmin is None else \
                self.hmin
            opts.hfun_hmax = np.max(hfun.value) if self.hmax is None else \
                self.hmax
            opts.verbosity = self.verbosity if verbosity is None else \
                verbosity

            # mesh of hfun window
            window_mesh = jigsaw_msh_t()
            window_mesh.mshID = 'euclidean-mesh'
            window_mesh.ndims = +2

            if marche is True:
                libsaw.marche(opts, hfun)

            libsaw.jigsaw(opts, geom, window_mesh, hfun=hfun)

            del geom
            # do post processing
            hfun.crs = utm_crs
            utils.interpolate(hfun, window_mesh, **kwargs)

            # reproject to combine with other windows
            if utm_crs is not None:
                window_mesh.crs = utm_crs
                utils.reproject(window_mesh, self.crs)


            # combine with results from previous windows
            output_mesh.tria3 = np.append(
                output_mesh.tria3,
                np.array([((idx + len(output_mesh.vert2)), tag)
                          for idx, tag in window_mesh.tria3],
                         dtype=jigsaw_msh_t.TRIA3_t),
                axis=0)
            output_mesh.vert2 = np.append(
                output_mesh.vert2,
                np.array(list(window_mesh.vert2),
                         dtype=jigsaw_msh_t.VERT2_t),
                axis=0)
            if output_mesh.value.size:
                output_mesh.value = np.append(
                    output_mesh.value,
                    np.array(list(window_mesh.value),
                             dtype=jigsaw_msh_t.REALS_t),
                    axis=0)
            else:
                output_mesh.value = np.array(
                        list(window_mesh.value),
                        dtype=jigsaw_msh_t.REALS_t)

        # NOTE: In the end we need to return in a CRS that
        # uses meters as units. UTM based on the center of
        # the bounding box of the hfun is used
        utm_crs = utils.estimate_bounds_utm(
                self.get_bbox().bounds, self.crs)
        if utm_crs is not None:
            transformer = Transformer.from_crs(
                self.crs, utm_crs, always_xy=True)
            output_mesh.vert2['coord'] = np.vstack(
                transformer.transform(
                    output_mesh.vert2['coord'][:, 0],
                    output_mesh.vert2['coord'][:, 1]
                    )).T
            output_mesh.crs = utm_crs
            print("we are out of mesh")

        return output_mesh

  
